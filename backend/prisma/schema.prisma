// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Region {
  CENTRAL
  EAST
  NORTH
  NORTH_EAST
  WEST
  UNKNOWN
}

// User Management
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  passwordHash String
  role         UserRole @default(CLIENT)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("users")
}

enum UserRole {
  CLIENT
  ADMIN
}

model Subzone {
  id           String   @id                    // stable URA subzone code/slug (e.g., "TAMPINES_EAST")
  name         String   @db.VarChar(120)       // display name (e.g., "Tampines East")
  region       Region   @default(UNKNOWN)
  geomGeoJSON  Json?                           // optional; polygons can also be client-only GeoJSON

  // Relations to population (1:1 - latest year only)
  population   Population?

  // Relations to point datasets (Task DATASET-AUDIT-AND-INGEST)
  hawkerCentres HawkerCentre[]
  mrtExits      MRTExit[]
  busStops      BusStop[]

  // Relations to existing models
  demand          Demand?
  supply          Supply?
  accessibility   Accessibility?
  scores          HawkerOpportunityScore[]

  // bookkeeping
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([name])
  @@index([region])
}

// Part B: Census 2020 Population by Subzone
model Population {
  subzoneId   String  @id                     // FK to Subzone.id
  subzoneName String  @db.VarChar(120)        // Denormalized for audit/debug
  year        Int                             // Census year (e.g., 2020)
  total       Int                             // Total resident population

  subzone     Subzone @relation(fields: [subzoneId], references: [id], onDelete: Cascade)

  @@index([year])
  @@index([total])
}

model PopulationUnmatched {
  id         String   @id @default(cuid())
  sourceKey  String   @db.VarChar(200)  // primary key or composite key from the gov dataset
  rawName    String   @db.VarChar(200)
  reason     String?  @db.VarChar(200)
  details    Json?
  createdAt  DateTime @default(now())
}

model DatasetSnapshot {
  id          String   @id @default(cuid())
  kind        String   @db.VarChar(64)     // e.g., "population"
  sourceUrl   String?  @db.VarChar(500)
  versionNote String?  @db.VarChar(200)    // optional semantic/date tag
  startedAt   DateTime @default(now())
  finishedAt  DateTime?
  status      String   @db.VarChar(40)     // "success" | "partial" | "failed"
  meta        Json?

  @@index([kind, startedAt])
}

// Part C: NEA Hawker Centres (point features with subzone assignment)
model HawkerCentre {
  id          String   @id               // Stable ID from NEA or generated from name+coords
  name        String   @db.VarChar(200)  // Hawker centre name
  operator    String?  @db.VarChar(100)  // E.g., "NEA", "Private"
  address     String?  @db.VarChar(300)  // Full address
  location    Json                       // GeoJSON Point { type: "Point", coordinates: [lng, lat] }
  subzoneId   String?                    // Assigned via point-in-polygon during ingest
  subzone     Subzone? @relation(fields: [subzoneId], references: [id], onDelete: SetNull)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([subzoneId])
  @@map("hawker_centres")
}

// Part D: MRT Exits (point features with subzone assignment)
model MRTExit {
  id          String   @id               // stable code or name+coord hash
  station     String?  @db.VarChar(200)  // Station name (e.g., "Jurong East")
  code        String?  @db.VarChar(50)   // Station/ex constructor (e.g., "NS1", "DT14", "Exit A")
  location    Json                       // GeoJSON Point { type: "Point", coordinates: [lng, lat] }
  subzoneId   String?                    // Assigned via point-in-polygon during ingest
  subzone     Subzone? @relation(fields: [subzoneId], references: [id], onDelete: SetNull)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([subzoneId])
  @@map("mrt_exits")
}

// Part D: Bus Stops (point features with subzone assignment)
model BusStop {
  id          String   @id               // LTA bus stop code, or name+coord hash
  name        String?  @db.VarChar(200)  // Bus stop name/description
  road        String?  @db.VarChar(200)  // Road name (e.g., "Orchard Road")
  location    Json                       // GeoJSON Point { type: "Point", coordinates: [lng, lat] }
  subzoneId   String?                    // Assigned via point-in-polygon during ingest
  subzone     Subzone? @relation(fields: [subzoneId], references: [id], onDelete: SetNull)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([subzoneId])
  @@map("bus_stops")
}

// Score Components
model Demand {
  id        String @id @default(cuid())
  subzoneId String @unique
  rawKDE    Float
  zScore    Float
  lambdaD   Float  // Kernel bandwidth
  createdAt DateTime @default(now())

  subzone   Subzone @relation(fields: [subzoneId], references: [id], onDelete: Cascade)

  @@map("demand")
}

model Supply {
  id              String @id @default(cuid())
  subzoneId       String @unique
  rawKDECompeting Float
  zScore          Float
  lambdaS         Float  // Kernel bandwidth
  createdAt       DateTime @default(now())

  subzone         Subzone @relation(fields: [subzoneId], references: [id], onDelete: Cascade)

  @@map("supply")
}

model Accessibility {
  id        String @id @default(cuid())
  subzoneId String @unique
  rawMRTKDE Float
  rawBusKDE Float
  betaMRT   Float
  betaBUS   Float
  lambdaM   Float  // MRT kernel bandwidth
  lambdaB   Float  // Bus kernel bandwidth
  zScore    Float
  createdAt DateTime @default(now())

  subzone   Subzone @relation(fields: [subzoneId], references: [id], onDelete: Cascade)

  @@map("accessibility")
}

// Final Scores
model HawkerOpportunityScore {
  id         String @id @default(cuid())
  subzoneId  String
  H          Float  // Final Hawker Opportunity Score
  zDemand    Float
  zSupply    Float
  zAccess    Float
  wD         Float  // Demand weight
  wS         Float  // Supply weight
  wA         Float  // Accessibility weight
  percentile Float
  snapshotId String
  createdAt  DateTime @default(now())

  subzone    Subzone @relation(fields: [subzoneId], references: [id], onDelete: Cascade)
  snapshot   Snapshot @relation(fields: [snapshotId], references: [id], onDelete: Cascade)

  @@map("hawker_opportunity_scores")
}

// Snapshots and Configuration
model Snapshot {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  notes     String?

  // Relations
  scores    HawkerOpportunityScore[]
  datasets  DatasetVersion[]
  config    KernelConfig?

  @@map("snapshots")
}

model DatasetVersion {
  id           String   @id @default(cuid())
  snapshotId   String
  datasetName  String
  sourceURL    String
  lastUpdated  DateTime
  retrievedAt  DateTime @default(now())
  schemaHash   String

  snapshot     Snapshot @relation(fields: [snapshotId], references: [id], onDelete: Cascade)

  @@map("dataset_versions")
}

model KernelConfig {
  id         String @id @default(cuid())
  kernelType String @default("Gaussian")
  lambdaD    Float
  lambdaS    Float
  lambdaM    Float
  lambdaB    Float
  betaMRT    Float
  betaBUS    Float
  notes      String?
  createdAt  DateTime @default(now())

  snapshot   Snapshot? @relation(fields: [id], references: [id])

  @@map("kernel_configs")
}
